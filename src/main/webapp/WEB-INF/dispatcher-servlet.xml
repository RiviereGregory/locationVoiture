<?xml  version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd 
                           http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
                           http://www.springframework.org/schema/security 
                           http://www.springframework.org/schema/security/spring-security-3.1.xsd 
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- pour utiliser les annotations dans les fichiers java -->
	<context:annotation-config />
	<context:component-scan base-package="fr.treeptik" />
	<!-- pour utiliser les annotations Spring MVC -->
	<mvc:annotation-driven />

	<!-- pour utiliser l'affichage web -->
	<!-- <bean id="viewResolver" -->
	<!-- class="org.springframework.web.servlet.view.InternalResourceViewResolver"> -->
	<!-- <property name="viewClass" -->
	<!-- value="org.springframework.web.servlet.view.JstlView" /> -->
	<!-- <property name="prefix" value="/pages/" /> -->
	<!-- <property name="suffix" value=".jsp" /> -->
	<!-- </bean> -->

	<!-- Pour utiliser Tiles a mettre a la place de celui du dessus (viewResolver) -->
	<bean id="viewResolverTiles"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass">
			<value>
				org.springframework.web.servlet.view.tiles2.TilesView
			</value>
		</property>
	</bean>
	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<!-- liste des fichiers xml pour la config de tiles -->
				<value>/WEB-INF/tiles.xml</value>
			</list>
		</property>
	</bean>

	<!-- pour configurer la connection à la base de donnée -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/locationvoiture" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean>
	<!-- Pour utiliser hibernate avec spring -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="fr.treeptik" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="true" />
				<!--Mettre true pour etre en create/update et false pour validate -->
				<property name="generateDdl" value="true" />
				<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />
			</bean>
		</property>
	</bean>

	<!-- pour gerer les messages du hibernate validator dans un properties -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<!-- Liste des fichies contenant les messages pour l'externalisation 
					des textes -->
				<value>messages</value>
			</list>
		</property>
		<property name="fallbackToSystemLocale" value="false" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!-- pour utiliser la langue que l'on veut utiliser en parametre de l'url -->
	<mvc:interceptors>
		<bean id="localeChangeInterceptor"
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<property name="paramName" value="lang" />
		</bean>
	</mvc:interceptors>
	<!-- la variable qui permet de modifier la lang ici qui est intercepté -->
	<bean id="localeChangeInterceptorLogin"
		class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
		<property name="paramName" value="lang" />
	</bean>

	<!-- creer un cookie pour utiliser la langue -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="defaultLocale" value="fr" />
	</bean>

	<!-- <bean id="localeResolverSession" -->
	<!-- class="org.springframework.web.servlet.i18n.SessionLocaleResolver"> -->
	<!-- <property name="defaultLocale" value="fr" /> -->
	<!-- </bean> -->

	<!-- Autre façon d'intercepter -->
	<bean id="handlerMapping"
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="interceptors">
			<ref bean="localeChangeInterceptorLogin" />
		</property>
	</bean>

	<!-- pour utiliser la langue que l'on veut utiliser en parametre de l'url 
		a la place de mvc:interceptor -->

	<!-- <bean id="localeChangeInterceptor" -->
	<!-- class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"> -->
	<!-- <property name="paramName" value="lang" /> -->
	<!-- </bean> -->
	<!-- creer un cookie pour utiliser la langue -->

	<!-- <bean id="localeResolver" -->
	<!-- class="org.springframework.web.servlet.i18n.CookieLocaleResolver"> -->
	<!-- <property name="defaultLocale" value="fr" /> -->
	<!-- </bean> -->
	<!-- redirige l'interceptor -->
	<!-- <bean id="handlerMapping" -->
	<!-- class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"> -->
	<!-- <property name="interceptors"> -->
	<!-- <ref bean="localeChangeInterceptor" /> -->
	<!-- </property> -->
	<!-- </bean> -->

	<!-- Pour gérer les transaction avec spring -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
		p:entityManagerFactory-ref="entityManagerFactory" />

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- pour la securité -->
	<security:global-method-security
		jsr250-annotations="enabled" secured-annotations="enabled" />

	<!-- pour que la page ne soit pas sécurisé -->
	<security:http pattern="/login.jsp" security="none" />
	<security:http pattern="/images/**" security="none" />
	<security:http pattern="/css/**" security="none" />

	<security:http>
		<!-- attention il faut mettre le chemin /pages avant le login pour le mapping 
			s'il n'est pas à la racine de webapps -->

		<security:form-login login-page="/login.jsp"
			authentication-failure-url="/login-failure.jsp" />

		<!-- <security:form-login login-page="/pages/login.jsp" -->
		<!-- default-target-url="/index.do" /> -->

		<security:intercept-url pattern="/login-failure.jsp"
			access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<!-- <security:intercept-url pattern="/pages/login.jsp" /> -->
		<security:intercept-url pattern="/**" access="ROLE_USER" />

		<!-- pour utiliser la deconnexion -->
		<security:logout />

		<!-- pour utiliser celui par defaut -->
		<!-- <security:form-login /> -->
	</security:http>

	<security:authentication-manager>
		<!-- <security:authentication-provider> -->
		<!-- <security:user-service> -->
		<!-- <security:user name="admin" password="admin" -->
		<!-- authorities="ROLE_USER" /> -->
		<!-- </security:user-service> -->
		<!-- </security:authentication-provider> -->

		<security:authentication-provider>
			<security:jdbc-user-service
				data-source-ref="dataSource"
				users-by-username-query="Select nom as login, password, enabled From users 
			where nom=?"
				authorities-by-username-query="Select nom, role from roles r where r.nom=? " />
		</security:authentication-provider>
	</security:authentication-manager>


	<!-- Pour log4j -->
	<!-- Bean qui contient le code qui serra exécuté cette conf peut être faite 
		avec l'annotation @Component -->
	<bean id="notifierAspect" class="fr.treeptik.locationvoiture.aspect.ConsoleNotifier" />
	<bean id="logAspect" class="fr.treeptik.locationvoiture.aspect.LogNotifier" />

	<!-- Conf AOP -->
	<aop:config>
		<!-- Définition des points d'interception (toutes les méthodes save de 
			toutes les classes des services) -->
		<aop:pointcut id="notifierPointcut"
			expression="execution(* fr.treeptik.locationvoiture.service.*.save(..))" />
		<!-- (toutes les méthodes de toutes les classes des services) -->
		<aop:pointcut id="logPointcut"
			expression="execution(* fr.treeptik.locationvoiture.service.*.*(..))" />
		<!-- (toutes les méthodes de toutes les classes des controller) -->
		<aop:pointcut id="controllerLogPointcut"
			expression="execution(* fr.treeptik.locationvoiture.controller.*.*(..))" />

		<!-- Appel des méthodes -->
		<!-- on utilise la class notifierAspect et la methode afterReturning avec 
			le point d'interception notifierPointcut -->
		<aop:aspect id="notifierAop" ref="notifierAspect">
			<aop:after-returning pointcut-ref="notifierPointcut"
				method="afterReturning" returning="result" />
			<!-- la methode beforeSave avec le point d'interception notifierPointcut -->
			<aop:before method="beforeSave" pointcut-ref="notifierPointcut" />
		</aop:aspect>
		<!-- on utilise la class logAspect et la methode afterReturning avec le 
			point d'interception logPointcut -->
		<aop:aspect id="logAop" ref="logAspect">
<!-- 			<aop:after-returning pointcut-ref="logPointcut" -->
<!-- 				method="afterReturning" returning="result" /> -->
			<!-- la methode beforeSaveService avec le point d'interception logPointcut -->
			<aop:before method="beforeSaveService" pointcut-ref="logPointcut" />
			<!-- la methode beforeSaveController avec le point d'interception controllerLogPointcut -->
			<aop:before method="beforeSaveController" pointcut-ref="controllerLogPointcut" />
		</aop:aspect>

	</aop:config>

</beans>
